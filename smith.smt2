(declare-rel fail ())
(declare-rel loop (Bool Bool Int Int Int Int (Array Int Int) (Array Int Int) Int Int Int Int Int Int))
(declare-rel main (Bool Bool (Array Int Int) (Array Int Int) Int Int Int Int Int Int))
(declare-var p1 Bool)
(declare-var l1 Bool)
(declare-var t1 Bool)
(declare-var f1 Bool)
(declare-var len1 Int)
(declare-var secret1 Int)
(declare-var i1 Int)
(declare-var i1_i Int)
(declare-var i1_ii Int)
(declare-var leak1 Int)
(declare-var leak1_i Int)
(declare-var leak1_ii Int)
(declare-var a1 (Array Int Int))
(declare-var a1_i (Array Int Int))
(declare-var a_in1 (Array Int Int))
(declare-var p2 Bool)
(declare-var l2 Bool)
(declare-var t2 Bool)
(declare-var f2 Bool)
(declare-var len2 Int)
(declare-var secret2 Int)
(declare-var i2 Int)
(declare-var i2_i Int)
(declare-var i2_ii Int)
(declare-var leak2 Int)
(declare-var leak2_i Int)
(declare-var leak2_ii Int)
(declare-var a2 (Array Int Int))
(declare-var a2_i (Array Int Int))
(declare-var a_in2 (Array Int Int))

(rule (=> (and
  (or (and p1 (< i1 len1)) (and p2 (< i2 len2)))
  (= l1 (and p1 (< i1 len1)))
  (= l2 (and p2 (< i2 len2)))
  (= t1 (and l1 (= (select a1 i1) 1)))
  (= t2 (and l2 (= (select a2 i2) 1)))
  (= f1 (and l1 (not (= (select a1 i1) 1))))
  (= f2 (and l2 (not (= (select a1 i2) 1))))
  (=> t1 (= leak1_i i1))
  (=> t2 (= leak2_i i2))
  (=> f1 (= leak1_i leak1))
  (=> f1 (= leak2_i leak2))
  (=> l1 (= i1_i (+ i1 1)))
  (=> l2 (= i2_i (+ i2 1)))
  (or l1 l2)
  (loop p1 p2 leak1_i leak2_i i1_i i2_i a1 a2 len1 len2 i1_ii i2_ii leak1_ii leak2_ii))
  (loop p1 p2 leak1 leak2 i1 i2 a1 a2 len1 len2 i1_ii i2_ii leak1_ii leak2_ii)))
  
(rule (=> (not (or (and p1 (< i1 len1)) (and p2 (< i2 len2))))
  (loop p1 p2 leak1 leak2 i1 i2 a1 a2 len1 len2 i1 i2 leak1 leak2)))

;(rule (=> (and
;  (=> (and p1 p2) (and (= i1 i2) (= leak1 leak2) (= a1 a2) (= len1 len2)))
;  (loop p1 p2 leak1 leak2 i1 i2 a1 a2 len1 len2 i1_i i2_i leak1_i leak2_i)
;  (not (=> (and p1 p2) (and (= i1_i i2_i) (= leak1_i leak2_i)))))
;  fail))

(rule (=> (and
  (=> p1 (= a1 a_in1))
  (=> p2 (= a2 a_in2))
  (=> p1 (= a1_i (store a1 secret1 1)))
  (=> p2 (= a2_i (store a2 secret2 1)))
  (=> (and p1 p2) (= secret1 secret2)) ; declassify secret
  (=> p1 (= i1 0))
  (=> p2 (= i2 0))
  (=> p1 (= leak1 0))
  (=> p2 (= leak2 0))
  (loop p1 p2 leak1 leak2 i1 i2 a1_i a2_i len1 len2 i1_i i2_i leak1_i leak2_i))
  (main p1 p2 a_in1 a_in2 len1 len2 secret1 secret2 leak1_i leak2_i)))

; low a_in version
(rule (=> (and
  (=> (and p1 p2) (and (= a_in1 a_in2) (= len1 len2)))
  (=> p1 (and (>= secret1 0) (< secret1 len1)))
  (=> p2 (and (>= secret2 0) (< secret2 len2)))
  (main p1 p2 a_in1 a_in2 len1 len2 secret1 secret2 leak1 leak2)
  (not (=> (and p1 p2) (= leak1 leak2))))
  fail))

; zero a_in version: (cannot parse)
;(rule (=> (and
;  (=> (and p1 p2) (= len1 len2))
;  (=> p1 (forall ((i1 Int)) (= (select a_in1 i1) 0)))
;  (=> p2 (forall ((i2 Int)) (= (select a_in2 i2) 0)))
;  (main p1 p2 a_in1 a_in2 len1 len2 secret1 secret2 leak1 leak2)
;  (not (=> (and p1 p2) (= leak1 leak2))))
;  fail))

(query fail)
