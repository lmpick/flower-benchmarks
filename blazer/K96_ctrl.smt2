(declare-rel fail ())
(declare-rel modExp (Bool Bool Int Int Int Int Int Int Int Int Int Int Int Int))
(declare-rel loop (Bool Bool Int Int Int Int Int Int Int Int Int Int))

(declare-var p1 Bool)
(declare-var w1 Int)
(declare-var s1 Int)
(declare-var s1_i Int)
(declare-var x1 Int)
(declare-var y1 Int)
(declare-var k1 Int)
(declare-var k1_i Int)
(declare-var r1 Int)
(declare-var r1_i Int)
(declare-var r1_ii Int)
(declare-var n1 Int)
(declare-var len1 Int)
(declare-var l1 Bool)
(declare-var lt1 Bool)
(declare-var lf1 Bool)
(declare-var time1 Int)
(declare-var time1_i Int)
(declare-var time1_ii Int)
(declare-var time1_iii Int)
(declare-var time1_iv Int)
(declare-var p2 Bool)
(declare-var w2 Int)
(declare-var s2 Int)
(declare-var s2_i Int)
(declare-var x2 Int)
(declare-var y2 Int)
(declare-var k2 Int)
(declare-var k2_i Int)
(declare-var r2 Int)
(declare-var r2_i Int)
(declare-var r2_ii Int)
(declare-var n2 Int)
(declare-var len2 Int)
(declare-var l2 Bool)
(declare-var lt2 Bool)
(declare-var lf2 Bool)
(declare-var time2 Int)
(declare-var time2_i Int)
(declare-var time2_ii Int)
(declare-var time2_iii Int)
(declare-var time2_iv Int)

(rule (=> (and
   (or (and p1 (< k1 w1)) (and p2 (< k2 w2)))
   (=> p1 (= time1_i (+ time1 1)))
   (=> p2 (= time2_i (+ time2 1)))
   (= l1 (and p1 (< k1 w1)))
   (= l2 (and p2 (< k2 w2)))
   (=> l1 (= lt1 (= 0 (mod (+ x1 k1) 2))))
   (=> l2 (= lt2 (= 0 (mod (+ x2 k2) 2))))
   (=> l1 (= lf1 (not (= 0 (mod (+ x1 k1) 2)))))
   (=> l2 (= lf2 (not (= 0 (mod (+ x2 k2) 2)))))
   (=> l1 (= time1_ii (+ time1_i 5)))
   (=> l2 (= time2_ii (+ time2_i 5)))
   (=> lt1 (= time1_iii (+ time1_ii 3)))
   (=> lt2 (= time2_iii (+ time2_ii 3)))
   (=> lf1 (= time1_iii (+ time1_ii 3)))
   (=> lf2 (= time2_iii (+ time2_ii 3)))
   (=> l1 (= k1_i (+ k1 1)))
   (=> l2 (= k2_i (+ k2 1)))
   (loop l1 l2 k1_i k2_i w1 w2 x1 x2 time1_iii time2_iii time1_iv time2_iv))
   (loop p1 p2 k1 k2 w1 w2 x1 x2 time1 time2 time1_iv time2_iv)))

(rule (=> (and 
   (not (or (and p1 (< k1 w1)) (and p2 (< k2 w2))))
   (=> p1 (= time1_i (+ time1 1)))
   (=> p2 (= time2_i (+ time2 1))))
   (loop p1 p2 k1 k2 w1 w2 x1 x2 time1 time2 time1_i time2_i)))

(rule (=> (and
  (or p1 p2)
  (=> p1 (= s1 1))
  (=> p2 (= s2 1))
  (=> p1 (= w1 len1))
  (=> p2 (= w2 len2))
  (=> p1 (= r1 0))
  (=> p2 (= r2 0))
  (=> p1 (= k1 0))
  (=> p2 (= k2 0))
  (=> p1 (= time1_i (+ time1 4)))
  (=> p2 (= time2_i (+ time2 4)))
  (loop p1 p2 k1 k2 w1 w2 x1 x2 time1_i time2_i time1_ii time2_ii))
  (modExp p1 p2 y1 y2 x1 x2 n1 n2 len1 len2 time1 time2 time1_ii time2_ii)))

(rule (=> (and
  (not (or p1 p2))
  (=> p1 (= s1 1))
  (=> p2 (= s2 1))
  (=> p1 (= w1 len1))
  (=> p2 (= w2 len2))
  (=> p1 (= r1 0))
  (=> p2 (= r2 0))
  (=> p1 (= k1 0))
  (=> p2 (= k2 0))
  (=> p1 (= time1_i (+ time1 4)))
  (=> p2 (= time2_i (+ time2 4))))
  (modExp p1 p2 y1 y2 x1 x2 n1 n2 len1 len2 time1 time2 time1_ii time2_ii)))

(rule (=> (and
 (=> (and p1 p2) (and (= len1 len2) (= time1 time2)))
 (modExp p1 p2 y1 y2 x1 x2 n1 n2 len1 len2 time1 time2 time1_i time2_i)
 (not (=> (and p1 p2) (= time1_i time2_i))))
 fail))

(query fail)
