(declare-rel fail ())
(declare-rel modPow1 (Bool Bool Int Int Int Int Int Int Int Int Int Int Int Int))
(declare-rel loop (Bool Bool Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int))

(declare-var p1 Bool)
(declare-var m1 Int)
(declare-var base1 Int)
(declare-var exp1 Int)
(declare-var i1 Int)
(declare-var i1_i Int)
(declare-var s1 Int)
(declare-var s1_i Int)
(declare-var s1_ii Int)
(declare-var width1 Int)
(declare-var len1 Int)
(declare-var l1 Bool)
(declare-var lt1 Bool)
(declare-var lf1 Bool)
(declare-var time1 Int)
(declare-var time1_i Int)
(declare-var time1_ii Int)
(declare-var time1_iii Int)
(declare-var time1_iv Int)
(declare-var p2 Bool)
(declare-var m2 Int)
(declare-var base2 Int)
(declare-var exp2 Int)
(declare-var i2 Int)
(declare-var i2_i Int)
(declare-var s2 Int)
(declare-var s2_i Int)
(declare-var s2_ii Int)
(declare-var width2 Int)
(declare-var len2 Int)
(declare-var l2 Bool)
(declare-var lt2 Bool)
(declare-var lf2 Bool)
(declare-var time2 Int)
(declare-var time2_i Int)
(declare-var time2_ii Int)
(declare-var time2_iii Int)
(declare-var time2_iv Int)

(rule (=> (and
   (or (and p1 (< i1 width1)) (and p2 (< i2 width2)))
   (=> p1 (= time1_i (+ time1 1)))
   (=> p2 (= time2_i (+ time2 1)))
   (= l1 (and p1 (< i1 width1)))
   (= l2 (and p2 (< i2 width2)))
   (=> l1 (= s1_i (mod (* s1 s1) m1)))
   (=> l2 (= s2_i (mod (* s2 s2) m2)))
   (=> l1 (= lt1 (= 0 (mod (- exp1 (+ i1 1)) 2))))
   (=> l2 (= lt2 (= 0 (mod (- exp2 (+ i2 1)) 2))))
   (=> l1 (= lf1 (not (= 0 (mod (- exp1 (+ i1 1)) 2)))))
   (=> l2 (= lf2 (not (= 0 (mod (- exp2 (+ i2 1)) 2)))))
   (=> l1 (= time1_ii (+ time1_i 6)))
   (=> l2 (= time2_ii (+ time2_i 6)))
   (=> lt1 (= s1_ii (mod (* s1 base1) m1)))
   (=> lt2 (= s2_ii (mod (* s2 base2) m2)))
   (=> lt1 (= time1_iii (+ time1_ii 3)))
   (=> lt2 (= time2_iii (+ time2_ii 3)))
   (=> lf1 (= s1_ii s1_i))
   (=> lf2 (= s2_ii s2_i))
   (=> lf1 (= time1_iii (+ time1_ii 3)))
   (=> lf2 (= time2_iii (+ time2_ii 3)))
   (=> l1 (= i1_i (+ i1 1)))
   (=> l2 (= i2_i (+ i2 1)))
   (loop l1 l2 i1_i i2_i width1 width2 s1_ii s2_ii base1 base2 exp1 exp2 m1 m2 time1_iii time2_iii time1_iv time2_iv))
   (loop p1 p2 i1 i2 width1 width2 s1 s2 base1 base2 exp1 exp2 m1 m2 time1 time2 time1_iv time2_iv)))

(rule (=> (and 
   (not (or (and p1 (< i1 width1)) (and p2 (< i2 width2))))
   (=> p1 (= time1_i (+ time1 1)))
   (=> p2 (= time2_i (+ time2 1))))
   (loop p1 p2 i1 i2 width1 width2 s1 s2 base1 base2 exp1 exp2 m1 m2 time1 time2 time1_i time2_i)))

(rule (=> (and
  (or p1 p2)
  (=> p1 (= s1 1))
  (=> p2 (= s2 1))
  (=> p1 (= width1 len1))
  (=> p2 (= width2 len2))
  (=> p1 (= i1 0))
  (=> p2 (= i2 0))
  (=> p1 (= time1_i (+ time1 3)))
  (=> p2 (= time2_i (+ time2 3)))
  (loop p1 p2 i1 i2 width1 width2 s1 s2 base1 base2 exp1 exp2 m1 m2 time1_i time2_i time1_ii time2_ii))
  (modPow1 p1 p2 base1 base2 exp1 exp2 m1 m2 len1 len2 time1 time2 time1_ii time2_ii)))

(rule (=> (and
  (not (or p1 p2))
  (=> p1 (= s1 1))
  (=> p2 (= s2 1))
  (=> p1 (= width1 len1))
  (=> p2 (= width2 len2))
  (=> p1 (= i1 0))
  (=> p2 (= i2 0))
  (=> p1 (= time1_i (+ time1 3)))
  (=> p2 (= time2_i (+ time2 3))))
  (modPow1 p1 p2 base1 base2 exp1 exp2 m1 m2 len1 len2 time1 time2 time1_ii time2_ii)))

(rule (=> (and
 (=> (and p1 p2) (and (= len1 len2) (= time1 time2)))
 (modPow1 p1 p2 base1 base2 exp1 exp2 m1 m2 len1 len2 time1 time2 time1_i time2_i)
 (not (=> (and p1 p2) (= time1_i time2_i))))
 fail))

(query fail)
