(declare-rel write (Bool Bool (Array Int Int) (Array Int Int) Int Int Int Int (Array Int Int) (Array Int Int) Int Int))
(declare-rel rewrite (Bool Bool Int Int Int Int Int Int Int Int))
(declare-rel wipe (Bool Bool (Array Int Int) (Array Int Int) Int Int Int Int (Array Int Int) (Array Int Int) Int Int Int Int))
(declare-rel skip_write (Bool Bool Int Int Int Int Int Int))
(declare-rel skip_read (Bool Bool Int Int Int Int Int Int Int Int))
(declare-rel read (Bool Bool (Array Int Int) (Array Int Int) Int Int Int Int Int Int))
(declare-rel leak (Bool Bool Int Int Int Int))
(declare-rel main (Bool Bool Int Int Int Int))
(declare-rel fail ())

(declare-var p1 Bool)
(declare-var l1 Bool)
(declare-var a1 (Array Int Int))
(declare-var a0_1 (Array Int Int))
(declare-var a1_1 (Array Int Int))
(declare-var a2_1 (Array Int Int))
(declare-var a3_1 (Array Int Int))
(declare-var a4_1 (Array Int Int))
(declare-var a5_1 (Array Int Int))
(declare-var a6_1 (Array Int Int))
(declare-var a7_1 (Array Int Int))
(declare-var wp1 Int)
(declare-var wp0_1 Int)
(declare-var wp1_1 Int)
(declare-var wp2_1 Int)
(declare-var wp3_1 Int)
(declare-var wp4_1 Int)
(declare-var wp5_1 Int)
(declare-var wp6_1 Int)
(declare-var wp7_1 Int)
(declare-var rp1 Int)
(declare-var rp0_1 Int)
(declare-var rp1_1 Int)
(declare-var rp2_1 Int)
(declare-var rp3_1 Int)
(declare-var rp4_1 Int)
(declare-var rp5_1 Int)
(declare-var rp6_1 Int)
(declare-var rp7_1 Int)
(declare-var s1 Int)
(declare-var s0_1 Int)
(declare-var amt1 Int)
(declare-var out1 Int)
(declare-var out0_1 Int)
(declare-var p2 Bool)
(declare-var l2 Bool)
(declare-var a2 (Array Int Int))
(declare-var a0_2 (Array Int Int))
(declare-var a1_2 (Array Int Int))
(declare-var a2_2 (Array Int Int))
(declare-var a3_2 (Array Int Int))
(declare-var a4_2 (Array Int Int))
(declare-var a5_2 (Array Int Int))
(declare-var a6_2 (Array Int Int))
(declare-var a7_2 (Array Int Int))
(declare-var wp2 Int)
(declare-var wp0_2 Int)
(declare-var wp1_2 Int)
(declare-var wp2_2 Int)
(declare-var wp3_2 Int)
(declare-var wp4_2 Int)
(declare-var wp5_2 Int)
(declare-var wp6_2 Int)
(declare-var wp7_2 Int)
(declare-var rp2 Int)
(declare-var rp0_2 Int)
(declare-var rp1_2 Int)
(declare-var rp2_2 Int)
(declare-var rp3_2 Int)
(declare-var rp4_2 Int)
(declare-var rp5_2 Int)
(declare-var rp6_2 Int)
(declare-var rp7_2 Int)
(declare-var s2 Int)
(declare-var s0_2 Int)
(declare-var amt2 Int)
(declare-var out2 Int)
(declare-var out0_2 Int)

; write(_byte)
(rule (=> (and
  (=> p1 (= a0_1 (store a1 wp1 s1)))
  (=> p2 (= a0_2 (store a2 wp2 s2)))
  (=> p1 (= wp0_1 (+ 1 wp1)))
  (=> p2 (= wp0_2 (+ 1 wp2))))
  (write p1 p2 a1 a2 wp1 wp2 s1 s2 a0_1 a0_2 wp0_1 wp0_2)))

; rewrite (reset)
(rule (=> (and
  (=> p1 (= rp0_1 0))
  (=> p2 (= rp0_2 0))
  (=> p1 (= wp0_1 0))
  (=> p2 (= wp0_2 0)))
  (rewrite p1 p2 wp1 wp2 rp1 rp2 rp0_1 rp0_2 wp0_1 wp0_2)))

; wipe (up to write cursor)
(rule (=> (and
  (not (or (and p1 (>= (- wp1 1) 0)) (and p2 (>= (- wp2 1) 0))))
  (=> p1 (= rp0_1 0))
  (=> p2 (= rp0_2 0))
  (=> p1 (= wp0_1 0))
  (=> p2 (= wp0_2 0))
  (=> p1 (= a0_1 a1))
  (=> p2 (= a0_2 a2)))
  (wipe p1 p2 a1 a2 wp1 wp2 rp1 rp2 a0_1 a0_2 wp0_1 wp0_2 rp0_1 rp0_2)))

(rule (=> (and
  (or (and p1 (>= (- wp1 1) 0)) (and p2 (>= (- wp2 1) 0)))
  (= l1 (and p1 (>= (- wp1 1) 0)))
  (= l2 (and p2 (>= (- wp2 1) 0)))
  (=> l1 (= a0_1 (store a1 (- wp1 1) 0)))
  (=> l2 (= a0_2 (store a2 (- wp2 1) 0)))
  (or l1 l2)
  (wipe l1 l2 a0_1 a0_2 (- wp1 1) (- wp2 1) rp1 rp2 a1_1 a1_2 wp0_1 wp0_2 rp0_1 rp0_2))
  (wipe p1 p2 a1 a2 wp1 wp2 rp1 rp2 a1_1 a1_1 wp0_1 wp0_2 rp0_1 rp0_2)))

; skip_write
(rule (=> (and
  (=> p1 (= wp0_1 (+ amt1 wp1)))
  (=> p2 (= wp0_2 (+ amt2 wp2))))
  (skip_write p1 p2 wp1 wp2 amt1 amt2 wp0_1 wp0_2)))

; skip_read (requires that read cursor stays behind write cursor)
(rule (=> (and
  (=> p1 (=> (< rp0_1 wp1) (= rp0_1 (+ amt1 rp1))))
  (=> p2 (=> (< rp0_2 wp2) (= rp0_2 (+ amt2 rp2))))
  (=> p1 (=> (not (< rp0_1 wp1)) (= rp0_1 (+ amt1 rp1))))
  (=> p2 (=> (not (< rp0_2 wp2)) (= rp0_2 (+ amt2 rp2)))))
  (skip_read p1 p2 wp1 wp2 rp1 rp2 amt1 amt2 rp0_1 rp0_2)))

; read(_byte)
(rule (=> (and
  (=> p1 (= out1 (select a1 rp1)))
  (=> p2 (= out2 (select a2 rp2)))
  (=> p1 (= rp0_1 (+ rp1 1)))
  (=> p2 (= rp0_2 (+ rp2 1))))
  (read p1 p2 a1 a2 rp1 rp2 rp0_1 rp0_2 out1 out2)))

(rule (=> (and
    (=> (and p1 p2) (and (= s1 s2) (= a1 a2) (= amt1 amt2)))
    (=> p1 (= wp1 0))
    (=> p2 (= wp2 0))
    (=> p1 (= rp1 0))
    (=> p2 (= rp2 0))
    (or p1 p2)
    ; write secrets
    (write p1 p2 a1 a2 wp1 wp2 s1 s2 a0_1 a0_2 wp0_1 wp0_2)
    (write p1 p2 a0_1 a0_2 wp0_1 wp0_2 s1 s2 a1_1 a1_2 wp1_1 wp1_2)
    (write p1 p2 a1_1 a1_2 wp1_1 wp1_2 s1 s2 a2_1 a2_2 wp2_1 wp2_2)
    ; call rewrite
    (rewrite p1 p2 wp2_1 wp2_1 rp1 rp2 wp3_1 wp3_2 rp3_1 rp3_2)
    (skip_write p1 p2 wp4_1 wp4_2 amt1 amt2 wp5_1 wp5_2)
    (skip_read p1 p2 wp5_1 wp5_2 rp4_1 rp4_2 (- amt1 1) (- amt2 1) rp6_1 rp6_2)
    (read p1 p2 a3_1 a3_2 rp6_1 rp6_2 rp7_1 rp7_2 out1 out2)
    ; "wipe"
    (wipe p1 p2 a2_1 a2_2 wp3_1 wp3_2 rp3_1 rp3_2 a3_1 a3_2 wp4_1 wp4_2 rp4_1 rp4_2)
    (not (=> (and p1 p2) (= out1 out2))))
  fail))

(query fail)
