(declare-rel fail ())
(declare-rel is_female (Bool Bool Int Int Int Int))
(declare-rel loop (Bool Bool Int Int (Array Int Int) (Array Int Int) Int Int Int Int Int Int))
(declare-rel main (Bool Bool (Array Int Int) (Array Int Int) Int Int Int Int))
(declare-rel requirement (Bool Bool Int Int (Array Int Int) (Array Int Int) Int Int))
(declare-var gender1 Int)
(declare-var res1 Int)
(declare-var t1 Bool)
(declare-var f1 Bool)
(declare-var tf1 Bool)
(declare-var ff1 Bool)
(declare-var tres1 Int)
(declare-var fres1 Int)
(declare-var l1 Bool)
(declare-var i1 Int)
(declare-var p1 Bool)
(declare-var len1 Int)
(declare-var count1 Int)
(declare-var count1_i Int)
(declare-var count1_ii Int)
(declare-var current1 Int)
(declare-var person1 Int)
(declare-var people1 (Array Int Int))
(declare-var gender2 Int)
(declare-var res2 Int)
(declare-var t2 Bool)
(declare-var f2 Bool)
(declare-var tf2 Bool)
(declare-var ff2 Bool)
(declare-var tres2 Int)
(declare-var fres2 Int)
(declare-var l2 Bool)
(declare-var i2 Int)
(declare-var p2 Bool)
(declare-var len2 Int)
(declare-var count2 Int)
(declare-var count2_i Int)
(declare-var count2_ii Int)
(declare-var current2 Int)
(declare-var person2 Int)
(declare-var people2 (Array Int Int))

(rule (=> (and
  (=> p1 (= gender1 (mod person1 2)))
  (=> p2 (= gender2 (mod person2 2)))
  (= t1 (and p1 (= gender1 0)))
  (= t2 (and p2 (= gender2 0)))
  (= f1 (and p1 (not (= gender1 0))))
  (= f2 (and p2 (not (= gender2 0))))
  (=> t1 (= res1 1))
  (=> t2 (= res2 1))
  (=> f1 (= res1 0))
  (=> f2 (= res2 0)))
  (is_female p1 p2 person1 person2 res1 res2)))

(rule (=> (and
  (or (and p1 (< i1 len1))
      (and p2 (< i2 len2)))
  (= l1 (and p1 (< i1 len1)))
  (= l2 (and p2 (< i2 len2)))
  (=> l1 (= current1 (select people1 i1)))
  (=> l2 (= current2 (select people2 i2)))
  (or l1 l2)
  (is_female l1 l2 current1 current2 tres1 tres2)
;  (=> l1 (= gender1 (mod current1 2)))
;  (=> l2 (= gender2 (mod current2 2)))
;  (= tf1 (and l1 (= gender1 0)))
;  (= tf2 (and l2 (= gender2 0)))
;  (= ff1 (and l1 (not (= gender1 0))))
;  (= ff2 (and l2 (not (= gender2 0))))
;  (=> tf1 (= tres1 1))
;  (=> tf2 (= tres2 1))
;  (=> ff1 (= tres1 0))
;  (=> ff2 (= tres2 0))
  (=> l1 (= fres1 tres1))
  (=> l2 (= fres2 tres2))
  (=> l1 (= count1_i (+ count1 fres1)))
  (=> l2 (= count2_i (+ count2 fres2)))
  (loop p1 p2 (+ 1 i1) (+ 1 i2) people1 people2 len1 len2 count1_i count2_i count1_ii count2_ii))
  (loop p1 p2 i1 i2 people1 people2 len1 len2 count1 count2 count1_ii count2_ii)))

(rule (=>
  (not (or (and p1 (< i1 len1))
           (and p2 (< i2 len2))))
  (loop p1 p2 i1 i2 people1 people2 len1 len2 count1 count2 count1 count2)))

(rule (=> (and
  (requirement p1 p2 0 0 people1 people2 len1 len2)
  (=> p1 (= i1 0))
  (=> p2 (= i2 0))
  (=> p1 (= count1 0))
  (=> p2 (= count2 0))
  (loop p1 p2 i1 i2 people1 people2 len1 len2 count1 count2 count1_i count2_i))
  (main p1 p2 people1 people2 len1 len2 count1_i count2_i)))

(rule (=> (and
  (or (and p1 (< i1 len1)) (and p2 (< i2 len2)))
  (= l1 (and p1 (< i1 len1)))
  (= l2 (and p2 (< i2 len2)))
  (=> (and l1 l2) (= (mod (select people1 i1) 2) (mod (select people2 i2) 2)))
  (requirement l1 l2 (+ 1 i1) (+ 1 i2) people1 people2 len1 len2))
  (requirement p1 p2 i1 i2 people1 people2 len1 len2)))

(rule (=>
  (not (or (and p1 (< i1 len1)) (and p2 (< i2 len2))))
  (requirement p1 p2 i1 i2 people1 people2 len1 len2)))
  
;(rule (=> (and
;    (not (=> (and p1 p2 (= i1 i2) (= people1 people2) (= len1 len2) (= count1 count2)) (= count1_i count2_i)))
;    (loop p1 p2 i1 i2 people1 people2 len1 len2 count1 count2 count1_i count2_i))
;    fail))

;(rule (=> (and
;    (=> (and p1 p2) (and (= people1 people2) (= len1 len2)))
;    (main p1 p2 people1 people2 len1 len2 count1_i count2_i)
;    (not (=> (and p1 p2) (= count1_i count2_i))))
;    fail))

;(rule (=> (and
;  (=> (and p1 p2) (= (mod person1 2) (mod person2 2)))
;  (is_female p1 p2 person1 person2 res1 res2)
;  (not (=> (and p1 p2) (= res1 res2))))
;  fail))

(rule (=> (and
    (=> (and p1 p2) (= len1 len2))
  ; (requirement p1 p2 0 0 people1 people2 len1 len2)
    (main p1 p2 people1 people2 len1 len2 count1_i count2_i)
    (not (=> (and p1 p2) (= count1_i count2_i))))
    fail))

(query fail)
